package model.items.spellbooks;

import graphics.sprites.Sprite;
import model.Actor;
import model.GameData;
import model.characters.decorators.CharacterDecorator;
import model.characters.general.GameCharacter;
import model.events.damage.Damager;
import model.items.foods.FoodItem;
import model.items.weapons.Weapon;

public class InvulnerabilityPotion extends WizardPotion {
    public InvulnerabilityPotion() {
        super("Invulnerability Potion", 705, "yellow");
    }

    @Override
    public Sprite getSprite(Actor whosAsking) {
        return new Sprite("invincpotion", "weapons2.png", 5, 25, this);
    }

    @Override
    protected String getPotionDescription() {
        return "A potion that makes you invulnerable to all sources of damage for exactly one turn.";
    }

    @Override
    public FoodItem clone() {
        return new InvulnerabilityPotion();
    }

    @Override
    protected void triggerSpecificReaction(Actor eatenBy, GameData gameData) {
        eatenBy.setCharacter(new InvincibilityDecorator(eatenBy.getCharacter(), gameData.getRound()));
    }

    private class InvincibilityDecorator extends CharacterDecorator {
        private final int roundSet;

        public InvincibilityDecorator(GameCharacter character, int round) {
            super(character, "Invulnerability");
            this.roundSet = round;
        }

        @Override
        public String getFullName() {
            return super.getFullName() + " (Invulnerable)";
        }

        @Override
        public void beExposedTo(Actor something, Damager damager) {
            getActor().addTolastTurnInfo("The power of the potion protects you from harm!");
        }

        @Override
        public boolean beAttackedBy(Actor performingClient, Weapon weapon, GameData gameData) {
            performingClient.addTolastTurnInfo("Nothing seems to be able to harm " +
                    getActor().getPublicName(performingClient) + "!");
            getActor().addTolastTurnInfo("The power of the potion protects you from harm!");
            return false;
        }

        @Override
        public void doAtEndOfTurn(GameData gameData) {
            super.doAtEndOfTurn(gameData);
            if (gameData.getRound() > roundSet) {
                getActor().removeInstance((GameCharacter gc) -> gc == this);
            }
        }
    }
}
